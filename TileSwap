=begin
================================================================================

DukeLeto7's Notes:
 
 Clarification on external versus internal tile IDs as described by HIme.  
 Tile IDs are stored  internally as large integer numbers.  Tiles A1 through 
 A127 are stored as numbers 2096 through 8144, at intervals of 48.  Numbers 
 evenly divisible by 48 are each of the 127 default centered tiles with no 
 edge effects.  Tiles with edge definitions are stored in the interval as 
 bitwise flagsets.  1 is left edge, 2 is top edge, 4 is right edge and 
 8 is bottom edge, so a tile ID 7 more than the "round" number divisible 
 by 48 for a given autotile set would  be a version of the tile with left, 
 top and right edges.  You can get this "index" number by taking the modulus 
 of 48 of one of these internal tile IDs. (16 and larger numbers also enter 
 into the edge definition logic but how is far from intuitively clear 
 from KilloZapit's auto-tile code.)
 
 Tiles A128-A256 are defined as internal tile IDs 1536-1664.  They are not
 auto-tiles with dynamic edge designs and each distinct integer in the range
 represents an individual tile with one form.  This is relevant because 
 "ground" tiles can be auto-tiles or not auto-tiles and The Last Sovereign 
 uses a tileset for the configurable headquarters that mixes both as 
 options for the ground tile swap.  For reference, it appears the range 
 B1-B256 are internal tile IDs 1-256, C1-C256 are 257-512, D1-D256 are 
 513-768 and E1-E256 are 769-1024.  Since TLS does not experiment with 
 swapping higher layer tiles, I have not investigated further.
 
 What I have done is tweak the auto-tile configuration process so that 
 replacing all instances of a given tile ID on a map with a replacement 
 tile ID will retain the auto-tile edges of the original map, rather than 
 redraw the edges algorithmically acoording to KilloZapit's code, which does 
 not perfectly reproduce the edges created by the map editor.  For cases where
 the tile swapping is done by referencing particular positions or a region 
 (or a mask, whatever that is) KilloZapit's original code is retained.  This 
 seems logical to me as there does not seem to be a use case where you are 
 anarchically swapping water tiles with wall tiles or floor tiles with 
 waterfall tiles and so on.  KilloZapit also presumes waterfalls and walls will
 always be found on certain ranges of tile IDs so this is a bit more flexible.
 
================================================================================
=end

class Game_Map
  #Overrides and replaces Hime's perform_load_new_map_data
  def perform_load_new_map_data
    @need_refresh_tiles = false
    for z in 0...3
      @updated_tiles.clear!
      tiles = $game_system.has_swap_tiles?(@map_id, z) ? $game_system.swapped_tiles[map_id][z] : nil
      regions = $game_system.has_swap_region?(@map_id, z) ? $game_system.swapped_region_tiles[map_id][z] : nil
      masks = $game_system.has_swap_mask?(@map_id, z) ? $game_system.swapped_mask_tiles[map_id][z] : nil
      position_tiles = $game_system.has_swap_pos?(@map_id, z) ? $game_system.swapped_pos_tiles[map_id][z] : nil
      next unless tiles or masks or regions or position_tiles
      for y in 0...height
        positions = position_tiles.nil? ? nil : position_tiles[y]
        for x in 0...width
                    new_tile = nil
          if positions
            new_tile = positions[x]
          end
          if new_tile.nil? and masks
            priority = nil
            masks.each {|mask, tid|
              if (priority.nil? or mask.priority > priority) and mask[x,y]
                new_tile = tid
                priority = mask.priority
              end
            }
          end
          if new_tile.nil? and regions
            new_tile = regions[tile_id(x, y, 3) >> 8] # region_id(x,y) - but without the extra valid?(x,y) overhead
          end
          old_tid = tile_id(x, y, z)
          # Stores the index of each original tile, assuming it is in the
          # auto-tile range.
          index = (tile_id(x, y, z) - 2048) % 48 if old_tid >= 2048
          if new_tile.nil? and tiles
            old_tid = old_tid - index if old_tid >= 2048
            new_tile = tiles[old_tid]
          end
          next if new_tile.nil?
          old_tid = tile_id(x, y, z)
          old_tid = old_tid - index if old_tid >= 2048
          next if new_tile == old_tid # quicker than the autotile recalibration overhead for a single tile
          # Copies the index value from the old tile to the new tile assuming
          # both are in the autotile range and are swapping by 
          # tiles and ONLY by tiles.
          if tiles and !position_tiles and !masks and !regions and old_tid >= 2048 and new_tile >= 2048
            @map.data[x, y, z] = new_tile + index
          else
            @map.data[x, y, z] = new_tile
          end
          @updated_tiles[x, y] = true
        end
      end
      @updated_tiles.grow
      # KilloZapit's auto-tile generation code is only run if we are not 
      # swapping by tiles and ONLY by tiles.
      if tiles and !position_tiles and !masks and !regions 
      else
      #-----------------------------------------------------------------------------
      # The following was originally based on auto-tile generation code by KilloZapit
      #-----------------------------------------------------------------------------
       @updated_tiles.each { |x, y, valid_left, valid_top, valid_right, valid_bottom|
        autotile = (tile_id(x, y, z) - 2048) / 48
        next if autotile < 0
        index = 0
        if autotile == 5 or autotile == 7 or autotile == 9 or autotile == 11 or autotile == 13 or autotile == 15
          # waterfall
          index |= 1 if valid_left && autotile_edge(autotile, x - 1, y, z)
          index |= 2 if valid_right && autotile_edge(autotile, x + 1, y, z)
        elsif autotile >= 48 and autotile <= 79 or autotile >= 88 and autotile <= 95 or autotile >= 104 and autotile <= 111 or autotile >= 120 and autotile <= 127
          # wall
          index |= 1 if valid_left && autotile_wall_edge(autotile, x - 1, y, z)
          index |= 2 if valid_top && autotile_edge(autotile, x, y - 1, z)
          index |= 4 if valid_right && autotile_wall_edge(autotile, x + 1, y, z)
          index |= 8 if valid_bottom && autotile_edge(autotile, x, y + 1, z)
        else
          # normal
          edge = 0
          edge |= 1 if valid_left && autotile_edge(autotile, x - 1, y, z)
          edge |= 2 if valid_top && autotile_edge(autotile, x, y - 1, z)
          edge |= 4 if valid_right && autotile_edge(autotile, x + 1, y, z)
          edge |= 8 if valid_bottom && autotile_edge(autotile, x, y + 1, z)
          if edge == 0 # -
            index |= 1 if valid_top && valid_left && autotile_edge(autotile, x - 1, y - 1, z)
            index |= 2 if valid_top && valid_right && autotile_edge(autotile, x + 1, y - 1, z)
            index |= 4 if valid_bottom && valid_right && autotile_edge(autotile, x + 1, y + 1, z)
            index |= 8 if valid_bottom && valid_left && autotile_edge(autotile, x - 1, y + 1, z)
          elsif edge == 1 # l
            index |= 1 if valid_top && valid_right && autotile_edge(autotile, x + 1, y - 1, z)
            index |= 2 if valid_bottom && valid_right && autotile_edge(autotile, x + 1, y + 1, z)
            index |= 16
          elsif edge == 2 # u
            index |= 1 if valid_bottom && valid_right && autotile_edge(autotile, x + 1, y + 1, z)
            index |= 2 if valid_bottom && valid_left && autotile_edge(autotile, x - 1, y + 1, z)
            index |= 20
          elsif edge == 3 # lu
            index = valid_bottom && valid_right && autotile_edge(autotile, x + 1, y + 1, z) ? 35 : 34
          elsif edge == 4 # r
            index |= 1 if valid_bottom && valid_left && autotile_edge(autotile, x - 1, y + 1, z)
            index |= 2 if valid_top && valid_left && autotile_edge(autotile, x - 1, y - 1, z)
            index |= 24
          elsif edge == 5 # lr
            index = 32
          elsif edge == 6 # ur
            index = valid_bottom && valid_left && autotile_edge(autotile, x - 1, y + 1, z) ? 37 : 36
          elsif edge == 7 # lur
            index = 42
          elsif edge == 8 # d
            index |= 1 if valid_top && valid_left && autotile_edge(autotile, x - 1, y - 1, z)
            index |= 2 if valid_top && valid_right && autotile_edge(autotile, x + 1, y - 1, z)
            index |= 28
          elsif edge == 9 # ld
            index = valid_top && valid_right && autotile_edge(autotile, x + 1, y - 1, z) ? 41 : 40
          elsif edge == 10 # ud
            index = 33
          elsif edge == 11 # lud
            index = 43
          elsif edge == 12 # rd
            index = valid_top && valid_left && autotile_edge(autotile, x - 1, y - 1, z) ? 39 : 38
          elsif edge == 13 # lrd
            index = 44
          elsif edge == 14 # urd
            index = 45
          elsif edge == 15 # lurd
            index = 46
          else # wtf
            index = 47
          end
        end
        @map.data[x, y, z]= 2048 + (48 * autotile) + index
      }
      end
    end
  end
end
